// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package wall

import (
	json "encoding/json"
	collider "github.com/bombergame/multiplayer-service/game/components/collider"
	transform "github.com/bombergame/multiplayer-service/game/components/transform"
	objects "github.com/bombergame/multiplayer-service/game/objects"
	physics "github.com/bombergame/multiplayer-service/game/physics"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson783c1624DecodeGithubComBombergameMultiplayerServiceGameObjectsWall(in *jlexer.Lexer, out *WallJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "object_type":
			out.ObjType = objects.ObjectType(in.Int8())
		case "transform":
			easyjson783c1624DecodeGithubComBombergameMultiplayerServiceGameComponentsTransform(in, &out.Transform)
		case "collider":
			easyjson783c1624DecodeGithubComBombergameMultiplayerServiceGameComponentsCollider(in, &out.Collider)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson783c1624EncodeGithubComBombergameMultiplayerServiceGameObjectsWall(out *jwriter.Writer, in WallJSON) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"object_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.ObjType))
	}
	{
		const prefix string = ",\"transform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson783c1624EncodeGithubComBombergameMultiplayerServiceGameComponentsTransform(out, in.Transform)
	}
	{
		const prefix string = ",\"collider\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson783c1624EncodeGithubComBombergameMultiplayerServiceGameComponentsCollider(out, in.Collider)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallJSON) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson783c1624EncodeGithubComBombergameMultiplayerServiceGameObjectsWall(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallJSON) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson783c1624EncodeGithubComBombergameMultiplayerServiceGameObjectsWall(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallJSON) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson783c1624DecodeGithubComBombergameMultiplayerServiceGameObjectsWall(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallJSON) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson783c1624DecodeGithubComBombergameMultiplayerServiceGameObjectsWall(l, v)
}
func easyjson783c1624DecodeGithubComBombergameMultiplayerServiceGameComponentsCollider(in *jlexer.Lexer, out *collider.Collider) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Radius":
			out.Radius = physics.Float(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson783c1624EncodeGithubComBombergameMultiplayerServiceGameComponentsCollider(out *jwriter.Writer, in collider.Collider) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Radius\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Radius))
	}
	out.RawByte('}')
}
func easyjson783c1624DecodeGithubComBombergameMultiplayerServiceGameComponentsTransform(in *jlexer.Lexer, out *transform.Transform) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Position":
			easyjson783c1624DecodeGithubComBombergameMultiplayerServiceGamePhysics(in, &out.Position)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson783c1624EncodeGithubComBombergameMultiplayerServiceGameComponentsTransform(out *jwriter.Writer, in transform.Transform) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson783c1624EncodeGithubComBombergameMultiplayerServiceGamePhysics(out, in.Position)
	}
	out.RawByte('}')
}
func easyjson783c1624DecodeGithubComBombergameMultiplayerServiceGamePhysics(in *jlexer.Lexer, out *physics.PositionVec2D) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "X":
			out.X = physics.Coordinate(in.Float64())
		case "Y":
			out.Y = physics.Coordinate(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson783c1624EncodeGithubComBombergameMultiplayerServiceGamePhysics(out *jwriter.Writer, in physics.PositionVec2D) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Y))
	}
	out.RawByte('}')
}
